import heapq
import math

class Node:
    def __init__(self, position, parent=None, cost=0, heuristic=0):
        self.position = position
        self.parent = parent
        self.cost = cost
        self.heuristic = heuristic
        self.priority = cost + heuristic

    def __lt__(self, other):
        return self.priority < other.priority

def calculate_heuristic(current, goal):
    dx = abs(current[0] - goal[0])
    dy = abs(current[1] - goal[1])
    return min(dx, dy) * 14 + abs(dx - dy) * 10  

def get_neighbors(current, map):
    neighbors = []
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]
    
    for dx, dy in directions:
        x = current[0] + dx
        y = current[1] + dy
        if 0 <= x < len(map) and 0 <= y < len(map[0]) and map[x][y] != -1:
            
            if map[x][y] == 1:
               cost = 1
    
            if map[x][y] == 0:
                cost = 3
            
            if dx != 0 and dy != 0:
                cost *= math.sqrt(2)

            neighbors.append((x, y, cost))
            
    return neighbors 

def reconstruct_path(node):
    path = []
    current = node
    while current is not None:
        path.append(current.position)
        current = current.parent
    return path[::-1]

def astar(map, start, goal):
    open_list = []
    closed_set = set()
    start_node = Node(start)
    start_node.heuristic = calculate_heuristic(start, goal)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        current_position = current_node.position

        if current_position == goal:
            print("Cost:", current_node.cost)
            return reconstruct_path(current_node)

        closed_set.add(current_position)
        
        test = get_neighbors(current_position, map)
        
        for neighbor_position in test:
            if neighbor_position[:2] in closed_set:
                continue

            neighbor_cost = current_node.cost + neighbor_position[2]
            neighbor_heuristic = calculate_heuristic(neighbor_position[:2], goal)
            neighbor_node = Node(
                neighbor_position[:2],
                parent=current_node,
                cost=neighbor_cost,
                heuristic=neighbor_heuristic
            )

            if neighbor_node in open_list:
                existing_node = open_list[open_list.index(neighbor_node)]
                if existing_node.cost > neighbor_cost:
                    existing_node.cost = neighbor_cost
                    existing_node.parent = current_node
                    heapq.heapify(open_list)
            else:
                heapq.heappush(open_list, neighbor_node)

    return None

# Example usage:
map = [
    [1, 1, 0, 1, 1],
    [-1, 0, 1, -1, 1],
    [0, 1, 0, 1, 1],
    [0, -1, 1, 0, 1],
    [1, 1, 0, 1, 1]
]
start = (0, 0)
goal = (4, 4)

path = astar(map, start, goal)
if path:
    print("Path found:", path)
else:
    print("Path not found!")